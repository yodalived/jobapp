"""add email verification token field

Revision ID: 7b0a910dc0b0
Revises: 2a4e4b8aa554
Create Date: 2025-06-16 14:01:38.230499

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7b0a910dc0b0'
down_revision: Union[str, None] = '2a4e4b8aa554'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_application_status_history_id'), table_name='application_status_history')
    op.drop_table('application_status_history')
    op.drop_index(op.f('ix_application_notes_id'), table_name='application_notes')
    op.drop_index(op.f('ix_application_notes_user_id'), table_name='application_notes')
    op.drop_table('application_notes')
    op.drop_index(op.f('ix_resume_versions_id'), table_name='resume_versions')
    op.drop_index(op.f('ix_resume_versions_user_id'), table_name='resume_versions')
    op.drop_table('resume_versions')
    op.drop_index(op.f('ix_companies_id'), table_name='companies')
    op.drop_index(op.f('ix_companies_name'), table_name='companies')
    op.drop_index(op.f('ix_companies_user_id'), table_name='companies')
    op.drop_table('companies')
    op.drop_index(op.f('ix_job_applications_company'), table_name='job_applications')
    op.drop_index(op.f('ix_job_applications_id'), table_name='job_applications')
    op.drop_index(op.f('ix_job_applications_status'), table_name='job_applications')
    op.drop_index(op.f('ix_job_applications_user_id'), table_name='job_applications')
    op.drop_table('job_applications')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('subscription_tier', postgresql.ENUM('FREE', 'STARTER', 'PROFESSIONAL', 'ENTERPRISE', name='subscriptiontier'), autoincrement=False, nullable=True),
    sa.Column('subscription_expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('applications_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('resumes_generated_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_login_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('job_applications',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('job_applications_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('company', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('position', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('job_type', postgresql.ENUM('TECHNICAL', 'MANAGEMENT', 'HYBRID', name='jobtype'), autoincrement=False, nullable=True),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('job_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('salary_min', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('salary_max', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('remote', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DISCOVERED', 'QUEUED', 'APPLIED', 'ACKNOWLEDGED', 'SCREENING', 'INTERVIEW', 'OFFER', 'REJECTED', 'WITHDRAWN', name='applicationstatus'), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('auto_applied', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('resume_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('resume_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cover_letter_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('discovered_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('source_job_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('extra_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('application_questions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='job_applications_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='job_applications_pkey'),
    sa.UniqueConstraint('url', name='job_applications_url_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_job_applications_user_id'), 'job_applications', ['user_id'], unique=False)
    op.create_index(op.f('ix_job_applications_status'), 'job_applications', ['status'], unique=False)
    op.create_index(op.f('ix_job_applications_id'), 'job_applications', ['id'], unique=False)
    op.create_index(op.f('ix_job_applications_company'), 'job_applications', ['company'], unique=False)
    op.create_table('companies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('website', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('linkedin_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('industry', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('size', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('extra_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('companies_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('companies_pkey'))
    )
    op.create_index(op.f('ix_companies_user_id'), 'companies', ['user_id'], unique=False)
    op.create_index(op.f('ix_companies_name'), 'companies', ['name'], unique=True)
    op.create_index(op.f('ix_companies_id'), 'companies', ['id'], unique=False)
    op.create_table('resume_versions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('version_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('template_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('job_type', postgresql.ENUM('TECHNICAL', 'MANAGEMENT', 'HYBRID', name='jobtype'), autoincrement=False, nullable=True),
    sa.Column('times_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('extra_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('resume_versions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('resume_versions_pkey'))
    )
    op.create_index(op.f('ix_resume_versions_user_id'), 'resume_versions', ['user_id'], unique=False)
    op.create_index(op.f('ix_resume_versions_id'), 'resume_versions', ['id'], unique=False)
    op.create_table('application_notes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['job_applications.id'], name=op.f('application_notes_application_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('application_notes_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('application_notes_pkey'))
    )
    op.create_index(op.f('ix_application_notes_user_id'), 'application_notes', ['user_id'], unique=False)
    op.create_index(op.f('ix_application_notes_id'), 'application_notes', ['id'], unique=False)
    op.create_table('application_status_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('old_status', postgresql.ENUM('DISCOVERED', 'QUEUED', 'APPLIED', 'ACKNOWLEDGED', 'SCREENING', 'INTERVIEW', 'OFFER', 'REJECTED', 'WITHDRAWN', name='applicationstatus'), autoincrement=False, nullable=True),
    sa.Column('new_status', postgresql.ENUM('DISCOVERED', 'QUEUED', 'APPLIED', 'ACKNOWLEDGED', 'SCREENING', 'INTERVIEW', 'OFFER', 'REJECTED', 'WITHDRAWN', name='applicationstatus'), autoincrement=False, nullable=True),
    sa.Column('changed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['application_id'], ['job_applications.id'], name=op.f('application_status_history_application_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('application_status_history_pkey'))
    )
    op.create_index(op.f('ix_application_status_history_id'), 'application_status_history', ['id'], unique=False)
    # ### end Alembic commands ###
