# docker-compose.yml
services:
  postgres:
    container_name: postgresql
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: resume_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - "6379:6379"

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "9080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  #api:
  #  build:
  #    context: .
  #    dockerfile: docker/Dockerfile.api
  #  ports:
  #    - "8000:8000"
  #  environment:
  #    DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres/resume_db
  #    REDIS_URL: redis://redis:6379
  #  depends_on:
  #    - postgres
  #    - redis
  #  volumes:
  #    - ./src:/app/src
  #  command: uvicorn src.api.main:app --host 0.0.0.0 --reload

  #worker:
  #  build:
  #    context: .
  #    dockerfile: docker/Dockerfile.worker
  #  environment:
  #    DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres/resume_db
  #    REDIS_URL: redis://redis:6379
  #  depends_on:
  #    - postgres
  #    - redis
  #  volumes:
  #    - ./src:/app/src
  #  command: celery -A src.worker.tasks worker --loglevel=info

volumes:
  postgres_data:
